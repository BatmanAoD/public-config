#!/bin/bash

# Script to automatically resize virtual monitors in VirtualBox
# Taken with minor changes from:
# https://superuser.com/questions/428159/forcing-monitor-resolution-in-virtualbox-vm-on-linux-guest

scriptname=$(basename $0)

# Log everything
if [[ -z $TMP ]]; then
    TMP=/tmp
fi

mkdir -p $TMP/log
logdir=$TMP/log/$scriptname

logwrite() {
    echo "$*" &>>${logdir}
}
logexec() {
    logwrite "Executing: $*"
    $* &>> ${logdir}
}

logwrite "*   *   *   *"
logwrite Starting $scriptname

finishlog() {
    logwrite "last return code: $rcode"
    logwrite "Finishing $scriptname"
    logwrite
}
exiterr() {
    rcode=$?
    echo "ERROR! Check log: $logdir" >&2
    finishlog
}

# Immediately quit on error
set -e

# Assume all early exits are errors
trap exiterr EXIT

if [[ "$1" == "--restart" ]]; then
    shift
    echo Restarting VBoxService and VBoxClient
    echo "(will prompt for sudo)"
    # Start the server
    logexec sudo killall VBoxService
    sleep 1
    logexec sudo VBoxService
    sleep 1

    # Start the client service
    logexec VBoxClient-all
fi

# 0's are on RIGHT, 1's are on LEFT (yeah.....)
if [[ $# -eq 0 ]]; then
    # Vertical SyncMaster
    hres0=1280 
    vres0=1920
    # 4K Seiki
    hres1=3840
    vres1=2160
elif [[ $# -eq 4 ]]; then
    # Right res
    hres0=$3
    vres0=$4
    # Left res
    hres1=$1
    vres1=$2
else
    echo "Usage: $scriptname [--restart] [lhres lvres rhres rvres]"
    exit
fi

# Ensure the total screen size is correct
logexec xrandr --fb $(($hres0 + $hres1))x$(($vres0 > $vres1 ? $vres0 : $vres1))

# Get the modeline information we want for the following resolutions:
# Left
RES1="$hres1 $vres1 30"
# Right
RES0="$hres0 $vres0 30"
logwrite Left  res: $RES1
logwrite Right res: $RES0

# Setup mappings for physical to virtual monitors
MAP0="VBOX0"
MAP1="VBOX1"

# Create names
NAME0=m0-${hres0}x${vres0}
NAME1=m1-${hres1}x${vres1}

# Function for getting a viable modeline from `cvt`
fixmodeline () {
    # # Explicitly specify first term; cvt gives inconsistent numbers that appear
    # # to cause problems
    # echo "93.73 $(echo $* | sed 's/\s+/ /' | cut -d ' ' -f4-11)"
    echo "$(echo $* | sed 's/\s+/ /' | cut -d ' ' -f3-11)"
}

# Generate settings
SETTINGS0="$NAME0 $(fixmodeline $( cvt $RES0 | grep Modeline))"
SETTINGS1="$NAME1 $(fixmodeline $( cvt $RES1 | grep Modeline))"
logwrite Left  settings: $SETTINGS1
logwrite Right settings: $SETTINGS0

# Delete the existing mode, if any (do not exit on error)
logexec xrandr --rmmode $NAME1 || true
# Create the new modeline via xrandr
logexec xrandr --newmode $SETTINGS1
# Add the newly created modeline to device
logexec xrandr --addmode $MAP1 $NAME1
# Finally, enable the new mode
logexec xrandr --output $MAP1 --mode $NAME1

# Repeat for MAP0
logexec xrandr --rmmode $NAME0 || true
logexec xrandr --newmode $SETTINGS0
logexec xrandr --addmode $MAP0 $NAME0
logexec xrandr --output $MAP0 --mode $NAME0 --right-of $MAP1

# Clear EXIT trap
trap - EXIT
finishlog
