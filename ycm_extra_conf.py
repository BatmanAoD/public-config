# Most of this script is copied from the YCM example.

import os
import subprocess
import ycm_core

# Default flags
flags = [
    '-Wall',
    '-Wextra',
    '-DNDEBUG',
    '-x',
    'c++',
    '-isystem',
    '/opt/llvm/3.5.1/tools/clang/include/',
    '-isystem',
    '/opt/gcc/4.9.2/include/',
    '-isystem',
    '/opt/Qt5.4.0/5.4/gcc/include/QtCore'
    '-I',
    '.',
    '-std=c++14'
]

SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']

# Use for debugging
def log(msg):
    with open('/tmp/ycm_extra_conf_log', 'a') as f:
        f.write(msg + '\n')

def GetCompilationDBase(filename):
    working_dir = os.path.dirname(filename)
    try:
        compilation_database_folder = subprocess.check_output(
            ['findpdirs', '-o'], cwd=working_dir).strip()
    except subprocess.CalledProcessError:
        log("`findpdirs` error")
        return None

    if os.path.exists(compilation_database_folder):
        log("Found compilation database folder: "+compilation_database_folder)
        return ycm_core.CompilationDatabase(compilation_database_folder)


def DirectoryOfThisScript():
    return os.path.dirname(os.path.abspath(__file__))


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        if new_flag:
            new_flags.append(new_flag)
    return new_flags


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']


def GetCompilationInfoForFile(database, filename):
    # The compilation_commands.json file generated by CMake does not have
    # entries for header files. So we do our best by asking the db for flags for
    # a corresponding source file, if any. If one exists, the flags for that
    # file should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(
                    replacement_file)
                if compilation_info.compiler_flags_:
                    return compilation_info
        return None
    return database.GetCompilationInfoForFile(filename)

def FlagsFromDBase(filename):
    database = GetCompilationDBase(filename)
    if database:
        log("Found database.")
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(database, filename)
        if not compilation_info:
            return None

        return MakeRelativePathsInFlagsAbsolute(
            compilation_info.compiler_flags_,
            compilation_info.compiler_working_dir_)
    else:
        log("Database NOT found!")

def FlagsForFile(filename, **kwargs):
    """
    To set kwargs['client_data'], use the g:ycm_extra_conf_vim_data option
    """
    final_flags = FlagsFromDBase(filename)

    # DO NOT remove `stdlib=libc++`

    if not final_flags:
        relative_to = DirectoryOfThisScript()
        final_flags = MakeRelativePathsInFlagsAbsolute(flags, relative_to)

    # Clang includes are system includes
    final_flags.append('-isystem-prefix clang_includes/')

    return {
        'flags': final_flags,
        'do_cache': True
    }
