#!/bin/bash

# This script is a workaround for https://github.com/microsoft/WSL/issues/5811.
# It permits calling gvim without `gvim.bat`, which only has two advantages
# over invoking the gvim.exe executable directly:
# * It knows the full path of the executable, because the version number is
#   hardcoded
# * It forks unless `--nofork` is provided, because the Windows executable does
#   not fork

# XXX These paths need to be generated by `./install --tools`.
# This should provide an option for choosing between vim and nvim as well.
# HOST_PATH='C:\tools\neovim\Neovim\bin\nvim-qt.exe'
# WSL_PATH='/mnt/c/tools/neovim/Neovim/bin/nvim-qt.exe'
# As long as the `exe` is on the path, this should work.
HOST_PATH=neovide.exe
WSL_PATH=neovide.exe

# if [[ ! -x "$WSL_PATH" ]]; then
#     echo "Cannot find application: '$WSL_PATH'" >&2
#     exit 1
# fi

if [[ "$@" == *"--nofork"* ]]; then
    # TODO: this fails with nvim! gvim.exe ignores --nofork, but nvim-qt.exe does NOT.
    "$WSL_PATH" "$@"
else
    # Arguments need to be re-quoted to work with PowerShell's `Start-Process`.
    ps_argstring=
    if [[ $# -gt 0 ]]; then
        # Yep, it's an insane mess, taken essentially from https://stackoverflow.com/a/2317171
        sep='`"", "`"'
        ps_argstring="$(printf "${sep}%s" "$@")"
        ps_argstring='"`"'"${ps_argstring:${#sep}}"'`""'
    fi

    # Powershell does not have the same bug as cmd.exe.
    # If launching a batch or powershell file instead of an exe, use `-windowstyle hidden`
    powershell.exe start "$HOST_PATH" $ps_argstring
fi
