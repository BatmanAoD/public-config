#!/bin/bash

# Functions and aliases for C++ development
# TODO some of these (e.g. acksub) are not C++ specific. Consider moving them
# elsewhere.

# Default args for compiling C++ programs
CXX_ARGS="-std=c++14 -Wall -Wextra -Wpedantic $CXX_ARGS"

# Call this to customize environment for C++ dev work
projc++ () {

    extraconfigcmds="$extraconfigcmds projc++ ; "

    # Start work on a new class
    newclass () {
        # XXX TODO this doesn't work when
        # the path starts with '../..'
        path_noext=${1%.*}
        header="${path_noext}.hpp"
        defs="${path_noext}.cpp"
        classname="$(basename "${path_noext}")"
        if [[ ! -e "$header" ]]; then
            printf "// Defines $classname\n#pragma once\n\nclass $classname\n{\n};" > "$header"
        fi
        if [[ ! -e "$defs" ]]; then
            printf "#include \"$(basename "$header")\"\n" > "$defs"
        fi
        if git rev-parse 2>/dev/null; then
            git add $header $defs
        fi
        edit $header $defs
    }
    
    addhxx () {
        path_noext=${1%.*}
        header_path="${path_noext}.hpp"
        impl_path="${path_noext}.hxx"
        header=$(basename ${header_path})
        impl=$(basename ${impl_path})
        echo "#include \"${impl}\"" >> $header_path
        printf "#pragma once\n#include \"${header}\"\n" > $impl_path
        edit $impl_path
        git add $impl_path
    }
        
   # to handle inclusion, pragma, git add
    
    # Start work on a catch test for a new class
    catchtest () {
        classname="$(basename $1)"
        existing_tests=$(find . -name "test*${classname}.cpp")
        if [[ -n "$existing_tests" ]]; then
            edit $existing_tests
        else
            newcatch $@
        fi
    }

    newcatch () {
        libdir="$(readlink -f $(dirname $1))"
        testdir="$libdir/Test"
        mkdir -p "$testdir"
        if [[ -n "$2" ]]; then
            testlevel="$2"
        else
            testlevel=0g
        fi
        if [[ -n "$3" ]]; then
            projname="$3"
        else
            projname="$(basename $libdir)"
        fi
        catchname=$testdir/test${testlevel}_${projname}_${classname}.cpp
        cat > $catchname <<CATCHTEMPLATE
// Tests $classname class
//
//-----------------
#define CATCH_CONFIG_MAIN  // Catch should provide main()
#include "catch.hpp"
//-----------------

#include "${classname}.hpp"

CATCHTEMPLATE
        edit $catchname
    }
    
    # Compile & link multiple translation units
    g++all () {
        if [[ $# -lt 2 ]]; then
            echo "Usage: g++all <progname> <src> [<src> ... ]" >&2
            return 1
        fi
        
        progname="$1"
        shift
        
        objfiles=
        
        for f in $*; do
            g++ $CXX_ARGS -c -std=c++14 -Wall -Wextra $f -o $f.o
            objfiles="$objfiles $f.o"
        done

        g++ $CXX_ARGS -o "${progname}" $objfiles
    }

    # rs should be aliased to rg or ack
    # Find source files
    alias findsrc='rs -f --cpp'
    alias findcpp='findsrc | rs -v "\.h"'
    # Assume tests are in a 'Test' dir
    alias findnontest="findcpp | rs -v '(^|\/)Test\/'"
    
    # Run clang's static-analysis tool recursively
    if hash clang-check 2>/dev/null; then
        alias cxxcheck='clang-check -analyze $(findnontest)'
    fi

}

# Used by defallfuncs
functions_with_defs="projc++; $functions_with_defs"

# When sourcing this file, if `projbci` had already been called, call it again
# to redefine the functions
eval $extraconfigcmds
