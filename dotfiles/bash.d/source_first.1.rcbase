#!/bin/bash
# The shebang is just to ensure that Vim knows how to highlight this file.

# XXX the 'bootstrap' script must be sourced first. Move the sourcing of that
# file here (instead of `.bashrc`)?

if [[ -n "$primary_HOME" ]]; then
    # Check that I have the rest of my "public-config" stuff.
    CONFIG_DIR="${primary_HOME}/public-config"
    # TODO consider looking for private-config, too
    alias cfgd_git="git --git-dir $CONFIG_DIR/.git"
    if [[ ! -d $CONFIG_DIR ]]; then
        echo "WARNING: public config directory not found!" >&2
        CONFIG_DIR=
        unalias cfgd_git
    elif grep -v -q -i 'batmanaod' \
    <(cfgd_git config --get remote.origin.url \
    2>/dev/null); then
        echo "WARNING: this bash config designed for use in conjunction" >&2
        echo "with the other config files in the BatmanAoD/public-config" >&2
        echo "git repository." >&2
        unalias cfgd_git
    else
        git_remote_head="$(timeout 1s cfgd_git \
            ls-LINUX_NATIVE origin -h refs/heads/master 2>/dev/null)"
        if [[ -n "$git_remote_head" ]]; then
            if [[ "$(cfgd_git rev-parse HEAD \
                    2>/dev/null)" != \
                "$(echo ${git_remote_head} | awk '{print $1}')" ]]; then
                echo "WARNING: local public config repo is not in sync with github!!" >&2
            fi
        fi
    fi
    ensure_on_path_if_exists "${primary_HOME}/bin"
fi

# If '${primary_HOME}/Public' is empty, delete it. I NEVER use it, and it's mostly just
# annoying.
if [[ -n "${primary_HOME}" && -n "$CONFIG_DIR" && -d "${primary_HOME}/Public" && -z $(ls -A "${primary_HOME}/Public") ]]; then
    rmdir "${primary_HOME}/Public"
fi

# LINUX_NATIVE is set in the `bootstrap` script
if $LINUX_NATIVE; then
    if [[ -n "${primary_HOME}" ]]; then
        # Currently using xmodmap instead of xkbmap
        if [[ -r "${primary_HOME}/.Xmodmap" ]]; then
            xmodmap "${primary_HOME}/.Xmodmap"
        else
            echo "WARNING: ${primary_HOME}/.Xmodmap not found!" >&2
        fi
    fi
    # TODO check if CAPS is configured, and if so, manually load Xmodmap? (Bug
    # in some WMs...)
    if [[ -f "${primary_HOME}/.Xkbmap" ]]; then
        echo "WARNING: Use of ${primary_HOME}/.Xkbmap is deprecated!" >&2
        if [[ -n "$CONFIG_DIR" ]]; then
            echo "Latest keymapping customizations can be found" >&2
            echo "in $CONFIG_DIR/.Xmodmap" >&2
        fi
    fi
fi

if $LINUX_ANY; then
    sharedobj_ext=so
elif $MAC_OSX; then
    sharedobj_ext=dylib
elif $WINDOWS; then
    sharedobj_ext=dll
else
    echo "WARNING: Don't know shared-object extension for current platform!" >&2
    # Not sure what the default should be. This seems sensible.
    sharedobj_ext=so
fi

if $id_is_known; then
    mkdir -p "${toolsbld_path}"
fi

# Set information about the history files
export histchars='!^'  # Get comments saved in history
export HISTSIZE=65536
export HISTFILESIZE=${HISTSIZE}
HISTCONTROL=ignoredups:erasedups
shopt -s histappend
shopt -s checkhash
# Apparently this disables tab-completion for paths. Haha! Uuuuurgh.
# http://stackoverflow.com/q/29907892/1858225
# shopt -s nullglob
# Intentionally duplicated from bashrc
shopt -s extglob
shopt -s globstar
shopt -s autocd

# use Vim as pager.
# Disabled for now because it's actually really annoying.
# TODO: if I can figure out how to get VIM to do colors correctly, then
# I can just implement it myself without all the annoyances built in
# by whoever programmed this thing.
# export PAGER='view -S ${primary_HOME}/.vimpager'
# TODO: make a list of things that bug me about this thing, because I can't
# actually remember why I stopped using it.
#   * numbers not on by default, even though 'set nu' is in vimrc
if [[ -e ${primary_HOME}/bin/vimpager ]]; then
    PAGER=$(readlink -f ${HOMEBIN}/vimpager)
else
  PAGER="less"
  export LESS="FRXQ"
fi
export PAGER

# Force man pages to be 80 columns wide.
export MANWIDTH=80

# I'd expect there to be a way to do this in my gitconfig, but...maybe not?
export GIT_ASKPASS=

# create a personal-use tmp dir
# Do NOT export! Programs should use the standard `/tmp`!
TMP="${primary_HOME}/tmp"
if $id_is_known; then
    mkdir -p "${primary_HOME}/tmp"
fi

if [[ ! -d "$TMP" ]]; then
    TMP=/tmp
fi

# Set up options
# set -u                # attempting to expand unset variables is an error
set -o monitor          # enable job control
set -o vi               # vi command-line editing

# Returns 0 if the file path *or any parent dirs* is a symlink
is_symlink () {
    if [[ -L "$1" ]]; then
        return 0
    fi
    parent="$(dirname -- "$1")"
    if [[ ! -e "$parent" || "$parent" = "$1" ]]; then
        # This is not actually a file argument, or we have reached the "top
        # level" (not root unless we had an abspath)
        return 1
    fi
    is_symlink "$parent"
}

# Workaround for a gvim/git-bash oddity.
# See https://stackoverflow.com/q/31167411/1858225
if ! $WSL && ! hash gvim 2>/dev/null && type gvim.bat &>/dev/null; then
    alias gvim=gvim.bat
fi

find_first_valid () {
    while [[ $# -gt 0 ]]; do
        if hash $1 2>/dev/null; then
            echo $1
            return
        fi
        shift
    done
    return 1
}

# TODO: The editor-finding logic no longer handles special cases for Cygwin or
# native Windows. If this is needed at some point, check the git history for
# notes on the old approaches, then...implement something better.
editors="vim vi"
if [[ -n $DISPLAY || $MAC_OSX || $WINDOWS ]]; then
    editors="neovide nvim-qt gvim code $editors"
fi
export NEWWINDOW_EDIT_CMD=$(find_first_valid $editors)
if [[ $? -ne 0 ]]; then
    echo "no editor (even vi) found!" >&2
else
    case $NEWWINDOW_EDIT_CMD in
        neovide)
            VISUAL="$NEWWINDOW_EDIT_CMD --no-fork"
            # Neovide does not fork by default.
            # See https://github.com/neovide/neovide/pull/2512
            export NEOVIDE_FORK=1
            ;;
        nvim-qt)
            VISUAL="$NEWWINDOW_EDIT_CMD --no-fork"
            ;;
        gvim)
            VISUAL="gvim -f"
            ;;
        code)
            VISUAL="code --wait"
            ;;
        *)
            VISUAL="NEWWINDOW_EDIT_CMD"
            ;;
    esac
    EDITOR=$VISUAL
fi

export PEDITOR="$EDITOR"
export EDOVER="$VISUAL"
set -o ignoreeof          # do not let CNTL-D exit the shell
shopt -s checkwinsize    # Reset LINES and COLUMNS after each command

# Inputrc settings to override
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"
bind Space:magic-space # ...for some reason this can't come earlier...?

add_prompt_command () {
    # Adapted from how `starship` handles this
    # A nicer way to handle this would be have a 'prompt-command-array`.... too
    # bad that's not a built-in feature, but it shouldn't be too hard to do it
    # myself.
    # TODO someone has already written this; try it out:
    # https://github.com/rcaloras/bash-preexec
    # Zsh actually does use arrays for its hooks:
    # http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions
    if [[ -z "$PROMPT_COMMAND" ]]; then
        PROMPT_COMMAND="$1"
    # TODO this check is not very robust. A better way would be to split the
    # prompt-command into an array based on `;`, then check each element.
    elif [[ "$PROMPT_COMMAND" != *"$1"* ]]; then
        # Remove any trailing semicolon before appending
        PROMPT_COMMAND="${PROMPT_COMMAND%;};$1;"
    fi
}

if hash starship 2>/dev/null; then
    # TODO look into adding Kubernetes information. See
    # personal-notes/context-items.md
    # Jeff's setup:
    # https://rms.slack.com/archives/CJJ7EQ285/p1557355726002600
    # TODO `starship init bash` is re-adding the prompt-command, because it
    # assumes that `starship_precmd` comes _last_.
    # Submit a bug report for this.
    # It actually makes some sense to _want_ starship_precmd to come last,
    # but the init command should _ensure_ that rather than behaving badly if
    # it doesn't.
    # So for now, the workaround is... run the init (which generates the
    # precomd and preexec functions), then restore the previous PROMPT_COMMAND,
    # then add `starship_precmd`.
    SAVED_PROMPT_COMMAND="$PROMPT_COMMAND"
    eval "$(starship init bash)"
    PROMPT_COMMAND="$SAVED_PROMPT_COMMAND"
    add_prompt_command starship_precmd
else
    # Set the prompt
    PS1='\h|\W> '    
    # Make it cyan
    PS1="\[\e[0;36m\]${PS1}\[\e[m\]"
    # If root, make that obvious
    if [[ $(whoami) == root ]]; then
        PS1="\[\e[0;31m\]\u@\[\e[m\]${PS1}"
    elif ! ${id_is_known}; then
        PS1="\[\e[0;33m\]\u@\[\e[m\]${PS1}"
    fi
fi

# Make `less` display colors and not clear the screen
# ....not reeeeeally sure what this does...
# export LESS="-XR"

# Figure out the correct RipGrep config file.
# If the parent env has already set a config file path, use that.
if [[ -z "$RIPGREP_CONFIG_PATH" ]]; then
    RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"
    if $WINDOWS; then
        # TODO consider setting this varialbe in Windows environment
        # settings so that it works in cmd.exe.
        RIPGREP_CONFIG_PATH_win="${RIPGREP_CONFIG_PATH}_win"
        if [[ -r "$RIPGREP_CONFIG_PATH_win" ]]; then
            RIPGREP_CONFIG_PATH="$RIPGREP_CONFIG_PATH_win"
        fi
    fi
fi
if [[ -r "$RIPGREP_CONFIG_PATH" ]]; then
    export RIPGREP_CONFIG_PATH
fi

# Load completion function
complete -r
if [[ -r /etc/bash_completion ]]; then
     . /etc/bash_completion
fi
if [[ -r /usr/local/etc/profile.d/bash_completion.sh ]]; then
    . /usr/local/etc/profile.d/bash_completion.sh
fi
# TODO - figure out why OS X doesn't seem to have a standard way to install
# Bash completions w/ Homebrew
if [[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]]; then
    . "/opt/homebrew/etc/profile.d/bash_completion.sh"
fi
if [[ -r "$HOME/.completions" ]]; then
    for completion in "$HOME/.completions"/*.bash; do
        . "$completion"
    done
fi
hash kubectl 2>/dev/null && . <(kubectl completion bash)
hash jj 2>/dev/null && . <(COMPLETE=bash jj)
set completion-ignore-case on

# This is a Mac thing, apparently... and if Java isn't installed at all, it
# doesn't work.
# if [[ -x /usr/libexec/java_home ]]; then
#     export JAVA_HOME="$(/usr/libexec/java_home)"
# fi

if $WSL; then
    if hash wsl-open 2>/dev/null; then
        # Adding wsl-open as a browser
        export BROWSER=wsl-open
    fi
fi

