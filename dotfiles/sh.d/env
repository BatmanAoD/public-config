#!/bin/sh

# This should be POSIX so it works with a wide variety of shells. It is
# designed simply to set up the PATH variable.

# Common path setup:
# OS X
if [ -r /usr/libexec/path_helper ]; then
    # Not sure why this isn't done by default for non-login shells on OS X.
    eval `/usr/libexec/path_helper`
fi

# Ensure particular dirs are on $PATH if they exist.
ensure_on_path_if_exists () {
    # PATH-editing convenience functions adapted from:
    # http://superuser.com/a/1001014/199803

    # TODO: restore the originals' ability to set a variable other than PATH,
    # but do so without `eval`

    # is $1 missing from $PATH?
    not_on_path() {
        case :${PATH}: in *:"$1":*) return 1;; *) return 0;; esac
    }
    # if $1 exists and is not in path, append it
    append_path () {
        [ -d "$1" ] && not_on_path "$1" && PATH="$PATH:$1"
    }
    # TODO: add a way to invoke these (sh-compliant and ideally without `eval`)
    # if $1 exists and is not in path, prepend it
    # prepend_path () {
    #     [ -d "$1" ] && not_on_path "$1" && PATH="$1:$PATH"
    # }
    # if $1 is in PATH, remove it
    # remove_from_path () {
    #     not_on_path "$1" || PATH=`eval echo :'$'${2:-PATH}: |
    #         sed -e "s;:$1:;:;g" -e "s;^:;;" -e "s;:\$;;"`
    # }

    # Preserve any existing explicit hashed paths
    save_paths="`mktemp`"
    hash -l | grep -v 'hash table empty' > "$save_paths"
    for p in "$@"; do
        append_path "$p"
    done
    . "$save_paths"
    rm "$save_paths"
}

ensure_on_path_if_exists \
    "${HOME}/bin" \
    /usr/local/go/bin \
    "${HOME}/.yarn/bin" "${HOME}/.config/yarn/global/node_modules/.bin" \
    "/home/linuxbrew/.linuxbrew/bin" \
    "${HOME}/.local/bin" \
    "${HOME}/.fluvio/bin" \
    "$HOME/bin" \
    "$HOME/.local/bin" \
    "/opt/local/bin" "/opt/local/sbin"

### other env stuff
# TODO consider porting over the Bash logic, instead
export EDITOR=vi

# Setup from MacPorts
# TODO: to avoid the duplication of `case` logic, extend the `not_on_path` function above to handle other vars
case :${MANPATH}: in *:"$/opt/local/share/man":*) ;; *) export MANPATH="/opt/local/share/man:$MANPATH";; esac


if hash go 2>/dev/null; then
    if [ -d "$HOME"/workspace/go ]; then
        export GOPATH="$HOME"/workspace/go
    else 
        export GOPATH="`go env GOPATH`"
    fi
    mkdir -p "$GOPATH/bin"
    ensure_on_path_if_exists "$GOPATH"/bin
fi

# Homebrew
if [ -f /opt/homebrew/bin/brew ]; then
    eval "`/opt/homebrew/bin/brew shellenv`"
fi

# Rust
if [ -f "$HOME/.cargo/env" ]; then
    . "$HOME/.cargo/env"
fi

