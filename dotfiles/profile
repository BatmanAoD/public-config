# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# generic setup for any shell
if [ -d "$HOME/public-config/dotfiles/sh.d" ]; then
    for s in "$HOME/public-config/dotfiles/sh.d/"*; do
        . "$s"
    done
fi
if [ -d "$HOME/private-config/sh.d" ]; then
    for s in "$HOME/private-config/sh.d/"*; do
        . "$s"
    done
fi

# Nu issues:
# - No support at all for background tasks: https://github.com/nushell/nushell/issues/247 
#   ... except via a module using `pueue`: https://github.com/nushell/nu_scripts/blob/main/modules/background_task/README.md
#   ... on Linux, there's this: https://github.com/yshui/job-security
# - variable-interpolation is *bizarrely* complicated. A simple `$HOME/foobar`
#   is... not easy. The simplest approach I've found is `$"($env.HOME)/foobar"`,
#   which... WAT??

# This enables using nushell as the default shell WITHOUT `chsh` by just running it here.
# This is *only* for interactive sessions.
# Launching Nu this way ensures that the environment variables set above are available.
# TODO: figure out how to configure Nu to use those sh scripts:
# see https://www.nushell.sh/book/configuration.html
# case "$-" in
#     *i*)
#         # In Linux and Mac, when launched from a UI element instead of the
#         # shell, VSCode runs a process to read rc files to determine what
#         # variables should be set. It apparently uses the exact same options as
#         # launching a real terminal...so it pretends to be interactive, even
#         # though it isn't. Thus we need to explicitly check for VSCode here to
#         # prevent launching Nu.
#         env > ~/tmp/startup_$$
#         if hash nu 2>/dev/null && [[ "$VSCODE_RESOLVING_ENVIRONMENT" != 1 ]]; then
#             exec nu;
#         fi
#         ;;
#     *) ;;
# esac

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi


# Added by OrbStack: command-line tools and integration
source ~/.orbstack/shell/init.bash 2>/dev/null || :
. "$HOME/.cargo/env"
