" See readme here: https://github.com/junegunn/vim-plug
"
" PlugInstall [name ...] [#threads] -   Install plugins
" PlugUpdate [name ...] [#threads]  -   Install or update plugins
" PlugClean[!]                      -   Remove unused directories (bang version will clean without prompt)
" PlugUpgrade                       -   Upgrade vim-plug itself
" PlugStatus                        -   Check the status of plugins
" PlugDiff                          -   Examine changes from the previous update and the pending changes
" PlugSnapshot[!] [output path]     -   Generate script for restoring the current snapshot of the plugins

call plug#begin('~/.vim/plugged')

" Lotsa langauges
Plug 'sheerun/vim-polyglot'
" respect `.editorconfig`, which GitHub also respects
Plug 'editorconfig/editorconfig-vim'
Plug 'nanotech/jellybeans.vim'
Plug 'terryma/vim-multiple-cursors'
" This remaps '/', which makes it no longer a simple movement, which
" wrecks things like 'c\{pat}' and 'V\pat'. It probably also causes
" some slow-down when initiating a search. So I'm disabling it.
" Plug 'SearchComplete'
Plug 'rkitover/vimpager'
Plug 'tpope/vim-surround'
Plug 'AndrewRadev/linediff.vim'
Plug 'vim-scripts/LargeFile'
" QML syntax highlighting
Plug 'peterhoeg/vim-qml'
" Rust syntax highlighting and autocompletion
Plug 'rust-lang/rust.vim'
" JSON5 (permits trailing commas)
Plug 'GutenYe/json5.vim'
" Gleam (Erlang BEAM language) support
Plug 'gleam-lang/gleam.vim'
" " Pest syntax highlighting
Plug 'pest-parser/pest.vim'
" TODO find a plugin that works for tailing
" Plug 'Tail-Bundle'
Plug 'vim-scripts/Rename'
" This guy copied a VimTip into his personal, GitHub-controlled Vim setup...
" so I'll just treat it as a plugin because I'm that lazy.
Plug 'BenBergman/vsearch.vim'
" TODO syntax highlighting for different filetypes within the same file:
" http://www.vim.org/scripts/script.php?script_id=4168
" TODO figure out how to use this
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
" Er, NVM, I hate this.
" Plug 'Raimondi/delimitMate'
" For attempting to debug syntax issues
Plug 'vim-scripts/SyntaxAttr.vim'
" For comments. Could switch to tpope/vim-commentary
" See discussion here: http://www.reddit.com/r/vim/comments/26mszm/what_is_everyones_favorite_commenting_plugin_and/
Plug 'tomtom/tcomment_vim'
" Git stuff
Plug 'tpope/vim-fugitive'
" Asynchronous commands (TODO: learn to use this)
" TODO: for NeoVim, switch to https://github.com/benekastah/neomake
Plug 'tpope/vim-dispatch'
" Allow opening files at a particular line number using 'file:line' format
" For some reason this causes an extra 'press ENTER' message when the arg is
" NOT in `file:line` format. Disabled for now.
" TODO find a different solution.
" Plug 'bogado/file-line'
" Syntax plugin for TI's PRUSS assembly language
Plug 'BatmanAoD/pruss-vim'
" Table mode
Plug 'dhruvasagar/vim-table-mode'
Plug 'salsifis/vim-transpose'
" CSV
Plug 'chrisbra/csv.vim'

" These should take care of all the 'very magic' nonsense
Plug 'coot/CRDispatcher'
Plug 'coot/EnchantedVim'

" Fork of Gundo with extra features
Plug 'simnalamburt/vim-mundo'

" SQL interaction
Plug 'tpope/vim-dadbod'

" Recommended by Scala Metals documentation:
Plug 'derekwyatt/vim-scala'

" Syntax highlighting for Kinesis keyboard layout files
Plug 'ArjenL/vim-kinesis'
autocmd BufNewFile,BufRead ?_{qwerty,dvorak}.txt,{qwerty,dvorak}.txt set filetype=advantage2
autocmd BufNewFile,BufRead layout[123456789].txt set filetype=freestyle

" YCM, coc, and probably other plugins provide LSP support in Vim8. Since I'm
" on NeoVim for now, and my config for these was old and broken, I'm just
" deleting that material.

" TODO: figure out if snips are useful. `nvim-cmp` mentions vsnip, luasnip,
" and ultisnips.

if has('nvim')
    Plug 'sakhnik/nvim-gdb'
    Plug 'nvim-treesitter/nvim-treesitter'
    Plug 'nvim-lua/plenary.nvim' " needed for Telescope
    Plug 'nvim-telescope/telescope.nvim'
    " TODO: figure out what these are for and how to actually install them,
    " and pick one:
    " Plug 'nvim-telescope/telescope-fzf-native.nvim'
    " Plug 'nvim-telescope/telescope-fzy-native.nvim'
    Plug 'folke/which-key.nvim'
    " completions; see note above about completions in Vim8
    " TODO: figure out if this also supports refactoring (YCM, coc, et. al do)
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/nvim-cmp'
    " LSP
    Plug 'williamboman/mason.nvim'
    Plug 'williamboman/mason-lspconfig.nvim'
    Plug 'neovim/nvim-lspconfig'
endif

call plug#end()

if has('nvim')
" `nvim-cmp` config, copied from README minus the snippet stuff
    set completeopt=menu,menuone,noselect
lua <<EOF
    -- Setup nvim-cmp.
    local cmp = require'cmp'

    cmp.setup({
        mapping = {
            ['<C-d>'] = cmp.mapping.scroll_docs(-4),
            ['<C-f>'] = cmp.mapping.scroll_docs(4),
            ['<C-Space>'] = cmp.mapping.complete(),
            ['<C-e>'] = cmp.mapping.close(),
            ['<CR>'] = cmp.mapping.confirm({ select = true }),
        },
        sources = {
            { name = 'nvim_lsp' },
            { name = 'buffer' },
        }
    })

    -- Setup lspconfig.
    require("mason").setup()
    require("mason-lspconfig").setup()
    -- local servernames = {
    --     "bashls", "csharp_ls", "dockerls", "gopls", "graphql",
    --     "jsonls", "powershell_es", "pyright", "rust_analyzer",
    --     "yamlls"
    -- }
    -- local lspcfg = require('lspconfig')
    -- for i, server in ipairs(servernames) do
    --     lspcfg[server].setup {
    --         capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities())
    --     }
    -- end
EOF

" which-key config
lua << EOF
    require("which-key").setup {
        -- TODO figure out what to do here:
        -- https://github.com/folke/which-key.nvim#-setup
    }
EOF
endif

" Jellybeans settings:
" TODO check first if jellybeans was successfully turned on?
" SpecialKey and NonText are for particular types of whitespace
let g:jellybeans_overrides = {
\   'cursor':       { 'guifg': '151515', 'guibg': 'b0d0f0' },
\   'statement':    { 'guifg': '57D9C7' },
\   'SpecialKey':   { 'guifg': 'FFFA00' },
\   'NonText':      { 'guifg': '444499' },
\   'Todo':         { 'guibg': '772222' },
\}

" I don't really like folds
let g:pymode_folding = 0
" This is causing problems
let g:pymode_rope = 0
" prevent Pymode and Mundo from messing with the window size
set winfixwidth
set winfixheight
set guioptions-=L

" Other plugin settings:

" for multi-cursor mode
" XXX figure out why this make startup weird in WSL
" nnoremap <C-m> :MultipleCursorsFind 

" Use Git-flavored-markdown style tables
let g:table_mode_corner="|"

" Mappings for use with plugins:
nnoremap <silent> <F5> :MundoToggle<CR>
" do a diff:
vnoremap <Leader>ld :Linediff<CR>
" start a diff and go to end of diff section:
vnoremap <Leader>ls :Linediff<CR>`>
" clear diff:
vnoremap <Leader>lc :LinediffReset<CR>
nnoremap <Leader>lc :LinediffReset<CR>

function! Disenchant()
let g:VeryMagic = 0
let g:VeryMagicSubstituteNormalise = 0
let g:VeryMagicSubstitute = 0
let g:VeryMagicGlobal = 0
let g:VeryMagicVimGrep = 0
let g:VeryMagicSearchArg = 0
let g:VeryMagicFunction = 0
let g:VeryMagicHelpgrep = 0
let g:VeryMagicRange = 0
let g:VeryMagicEscapeBackslashesInSearchArg = 0
let g:SortEditArgs = 0
endfunction

" Since I use incsearch:
let g:VeryMagic = 0
nnoremap / /\v
nnoremap ? ?\v
vnoremap / /\v
vnoremap ? ?\v
" If I type // or ??, I don't EVER want \v, since I'm repeating the previous
" search.
noremap // //
noremap ?? ??
" no-magic searching
noremap /v/ /\V
noremap ?V? ?\V

" Turn on all other features.
let g:VeryMagicSubstituteNormalise = 1
let g:VeryMagicSubstitute = 1
let g:VeryMagicGlobal = 1
let g:VeryMagicVimGrep = 1
let g:VeryMagicSearchArg = 1
let g:VeryMagicFunction = 1
let g:VeryMagicHelpgrep = 1
let g:VeryMagicRange = 1
let g:VeryMagicEscapeBackslashesInSearchArg = 1
let g:SortEditArgs = 1


" Additional plugins to try eventually:
" Lokaltog/vim-easymotion
