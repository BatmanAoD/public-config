#!/bin/bash

# Functions and aliases for C++ development

# Call this to customize environment for C++ dev work
projc++ () {

    # Start work on a new class
    newclass () {
        header="${1}.hpp"
        defs="${1}.cpp"
        classname="$(basename "${1}")"
        if [[ ! -e "$header" ]]; then
            printf "// Defines $classname\n#pragma once\n\nclass $classname\n{\n};" > "$header"
        fi
        if [[ ! -e "$defs" ]]; then
            printf "#include \"$(basename "$header")\"" > "$defs"
        fi
        edit $header $defs
    }

    # Start work on a catch test for a new class
    catchtest () {
        classname="$(basename $1)"
        existing_tests=$(find . -name "test*${classname}.cpp")
        if [[ -n "$existing_tests" ]]; then
            edit $existing_tests
        else
            newcatch $@
        fi
    }

    newcatch () {
        libdir="$(readlink -f $(dirname $1))"
        testdir="$libdir/Test"
        mkdir -p "$testdir"
        if [[ -n "$2" ]]; then
            testlevel="$2"
        else
            testlevel=0g
        fi
        if [[ -n "$3" ]]; then
            projname="$3"
        else
            projname="$(basename $libdir)"
        fi
        catchname=$testdir/test${testlevel}_${projname}_${classname}.cpp
        cat > $catchname <<CATCHTEMPLATE
// Tests $classname class
//
//-----------------
#define CATCH_CONFIG_MAIN  // Catch should provide main()
#include "catch.hpp"
//-----------------

#include "${classname}.hpp"

CATCHTEMPLATE
        edit $catchname
    }

    # Global search & replace
    acksub () {
        if [[ $# -lt 2 ]]; then
            echo "Usage: acksub <pattern> <replacement>" >&2
        fi
        pattern="$1"
        replacement="$2"
        ack -l "$pattern" | xargs perl -pi -E "s/$pattern/$replacement/g"
    }

}
# Used by defallfuncs
functions_with_defs="projc++; $functions_with_defs"
