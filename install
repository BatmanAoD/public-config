#!/usr/bin/env bash

# XXX TODO: for 'TODO' items, it would be nice to print a message explaining
# what's not already automated, prompting the user to do it manually.

if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
    # There aren't _too_ many things that rely on Bash 4.
    # But on the other hand, I don't ever plan to use Bash 3 as my primary shell.
    echo "ERROR: Bash version is $BASH_VERSION, but only 4 and above are supported." >&2
    exit 2
fi

# Assumes not `set -e`
. ~/public-config/dotfiles/bash.d/source_first.0.bootstrap

set -e
set -u
# We use aliases in this script.
shopt -s expand_aliases

install_tools=false
while [[ ! -z "${1+x}" ]]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    case $PARAM in
        -t | --tools)
            install_tools=true
            ;;
        *)
            echo "Usage: $0 [-t|--tools]"
            exit 1
            ;;
    esac
    shift
done

# TODO this confirmation should be persistent, and probably should be tied to
# my list of "known personas" that's currently in my 'base' bash rc file.
echo '$HOME' " is currently $HOME. Press any key to continue or Ctl-C to quit."
if $WINDOWS; then
    # TODO: don't give this warning unless the `public-config` directory's
    # parent is somewhere other than `$HOME`.
    # (Note: this whole script appears to assume the location of the
    # `public-config` dir...)
    cat <<WIN_HOME_INSTRUCTIONS
To set the HOME variable to your user-profile directory, manually create
it and assign it to '%USERPROFILE%'.
WIN_HOME_INSTRUCTIONS
    alias universal_symlink=win_symlink
else
    alias universal_symlink='ln -s'
fi
read dummy

link_s () {
    if [[ $# -eq 1 ]]; then
        new_link="$(basename "${1}")"
    elif [[ $# -eq 2 ]]; then
        new_link="${2}"
    else
        echo "ERROR: symlink creation requires one or two arguments!" >&2
        # Currently, we *exit* with *error*...because this is a script bug.
        exit 64
    fi
    if [[ -h "${new_link}" ]]; then rm "${new_link}"; fi
    if [[ -e "${new_link}" ]]; then
        # XXX TODO: Provide option to force overwrite.
        echo "ERROR: Can't overwrite non-symlink file: ${new_link}" >&2
    else
        universal_symlink "${1}" "${new_link}"
    fi
}

cd ~

shopt -s nullglob

# `.bashrc` almost always exists.
# XXX on Windows, don't have permission to do symlinks by default.
# *CHECK* that symlink creation doesn't fail, *THEN* remove bashrc!
# rm -f ~/.bashrc

# TODO: consider using a dotfiles manager; probably either toml-bombadil or chezmoi
# TODO: on Windows, OS_specific/Windows/alacritty.yml should be symlinked to
# %APPDATA%\alacritty\alacritty.yml
for prog in bash input gdb irb vim zsh git ack ycm ripgrep; do
    echo Installing rc files for ${prog}
    for file in ~/public-config/dotfiles/${prog}* ~/private-config/dotfiles/${prog}*; do
        rcname=".$(basename "${file}")"
        link_s "${file}" ${rcname}
    done
done

NVIM_PATH=~/.config/nvim
if ${WINDOWS}; then
    # TODO change Windows options using Powershell, e.g. show file extensions
    # in Explorer:
    # http://stackoverflow.com/a/8110982/1858225
    link_s .vim vimfiles
    NVIM_PATH=~/AppData/Local/nvim
fi

if [[ -d "${NVIM_PATH}" ]]; then
    link_s "~/.vimrc" "${NVIM_PATH}/init.vim"
fi

echo "Installing common options for git"
# I assume `git` is installed, because that's the easiest way to get a copy of
# this config directory.
git config --global --add include.path ~/public-config/includefile_gitconfig
# Use .gitignore globally
git config --global core.excludesfile ~/.gitignore
# TODO Set username and email now?

# TODO: WSL using credential manager:
# find `git-credential-manager-core.exe` and use it:
# git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager-core.exe"
# For Scoop, this path was:
# ~/scoop/apps/git/2.32.0.windows.2/mingw64/libexec/git-core/<exe>

mkdir -p ~/bin
cd ~/bin
for prog in ~/public-config/bin/*; do
    basename="$(basename "${prog}")"
    if [[ ! -e "${basename}" ]]; then
        echo "Installing '~/bin/${basename}'"
        link_s "${prog}"
    else
        echo "'${basename}' already installed"
    fi
done

if ${LINUX_ANY}; then
    # Linux-specific
    linux_specific=~/public-config/OS_specific/Linux
    
    if $LINUX_NATIVE; then
        # Install Xmodmap
        if [[ ! -e ~/.Xmodmap ]]; then
            echo "Installing Xmodmap"
            link_s "${linux_specific}"/Xmodmap ~/.Xmodmap
        else
            echo "Xmodmap already exists; not overwriting"
        fi
    fi

    # TODO: if WSL, set WSL hostname in `/etc/wsl.conf`:
    # ```toml
    # [network]
    # hostname = <name>
    # ```
    
    # Install .i3 config
    mkdir -p ~/.i3
    cd ~/.i3
    if [[ ! -e config ]]; then
        echo Installing i3 config
        link_s "${linux_specific}/i3_config"
        mv i3_config config
    else
        echo i3 config already installed
    fi
elif ${MAC_OSX}; then
    # Currently nothing to do.
    :
    # TODO:
    # Bash completions dir? (Apparently no standard for this...)
    # Set up login shell appropriately? https://stackoverflow.com/a/7780055/1858225
fi

##############################################################################
##############################################################################
# CREATE SANDBOX DIRECTORY
##############################################################################
##############################################################################
# XXX TODO
# * Sandbox setup with makefile, inspired by http://stackoverflow.com/a/32485029/1858225
# * To check whether c++14, etc is supported:
# g++ -std=c++14 2>&1 | grep -q 'unrecognized command line'

##############################################################################
##############################################################################
# INSTALL 3RD-PARTY TOOLS
##############################################################################
##############################################################################

if ! ${install_tools}; then
    exit
fi

##############################################################################
# Misc TODO
##############################################################################
# XXX TODO automatically generate SSH ID and send to G:
# https://gist.github.com/zentralwerkstatt/9e6c83e757cdfe430d6710585b2275c7

##############################################################################
# TODO: how can we determine if the installed vim feature-set is sufficient for
# the plugins I'm using? (`vim --version | grep <something>`?)
vim_plug=autoload/plug.vim
vim_plugin_mgr=~/.vim/${vim_plug}
# XXX this... doesn't work at all on Windows...?
# For some reason `hash` doesn't always work on Windows in Git Bash, so try
# `where` as well.
if hash vim 2>/dev/null || where vim &>/dev/null; then
    if [[ ! -a "${vim_plugin_mgr}" ]]; then
        if hash curl 2>/dev/null; then
            echo Installing Vim plugins
            curl -fLo "${vim_plugin_mgr}" --create-dirs \
                https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            vim "+PlugInstall"
        else
            echo "'curl' not installed; not installing Vim-Plug."
        fi
    fi
else
    # TODO `vim-gtk` seems pretty good, generally; just install that?
    echo "WARNING: vim not installed"
fi

# TODO Somehow automatically perform no-extension file-association?
# https://superuser.com/a/13947/199803

# TODO ultimately this should *NOT* depend on Vim.
if [[ -e "$vim_plugin_mgr" && ! -e "${NVIM_PATH}/${vim_plug}" ]]; then
    mkdir -p "${NVIM_PATH}/$(dirname "${vim_plug}")"
    link_s "$vim_plugin_mgr" "${NVIM_PATH}/${vim_plug}"
fi

# Install dev tools (Debian-based only)
# TODO: other package managers
# XXX TODO: Windows now has 'winget' (in preview)! Use that.
# TODO: `brew` for Mac?
installusingchoco=false
installusingapt=false
if ${WINDOWS}; then
    # if ! hash choco 2>/dev/null; then
    #     XXX TODO We need an ELEVATED command shell to install Chocolatey.
    #     ...doing the install automatically is probably not worth the hassle.
    #     And indeed by the time we're runing this script, we've already
    #     installed some kind of Bash, which could have been installed using
    #     Chocolatey!
    #     It may be better to just make the Chocolatey install the manual
    #     "first step" for all new machines; the setup would be:
    #       * Open `cmd` as admin
    #       * Run the Chocolatey install-command (below)
    #       * `%ALLUSERSPROFILE%\chocolatey\bin\choco install git.install`
    #       * `%ALLUSERSPROFILE%\chocolatey\bin\choco install conemu`
    #       * Close the `cmd` window, open git bash in conemu, do manual conemu setup
    #           * TODO: conemu setup is stored in `xml`; we could probably
    #             include this as a config file!
    #       * Here in `install`, just check if `choco` is installed.
    #           * If not: print a warning
    #           * If so: install packages
    #     Command to install chocolatey:
    #       @powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
    #     Chocolatey bin path is: %ALLUSERSPROFILE%\chocolatey\bin
    # fi
    if hash choco 2>/dev/null; then
        installusingchoco=true
    fi
elif hash apt-get 2>/dev/null; then
    installusingapt=true
fi

# TODO it should be able to unify our package-manager logic.
# * Install commands are always (?) of the form `<pkg-mgr-install> <pkg-name>`
# * We would need to set up a pkg-mgr-install-command function/alias/variable,
#   then have a lookup table for known packages. Then something like:
#       for pkg in $known_pkgs; do
#           # TODO check syntax for assoc-array!!
#           pkg_name="${pkg_names[$mgr][$pkg]}"
#           if [[ -z "$pkg_name" ]]; then continue; fi
#           $pkgmgr_install $pkg_name
#       done

havetoolchain=false
if hash g++ 2>/dev/null; then
    havetoolchain=true;
else
    if hash clang++ 2>/dev/null; then
        havetoolchain=true;
    else
        if $installusingapt; then
            echo Installing build-essential using apt
            sudo apt-get install build-essential
            if [[ $? -eq 0 ]]; then
                havetoolchain=true
            fi
        fi
    fi
fi

havecmake=false
if hash cmake 2>/dev/null; then
    havecmake=true;
else
    if $installusingapt; then
        echo Installing cmake using apt
        sudo apt-get install cmake
        if [[ $? -eq 0 ]]; then
            havecmake=true
        fi
    fi
fi

if $installusingapt; then
    echo Installing xclip using apt
    sudo apt-get install xclip
fi

# TODO: install FiraCode font: https://github.com/tonsky/FiraCode
# On Windows, with Scoop:
# ```
# scoop bucket add nerd-fonts
# scoop install FiraCode
# ```
# ...actually, Consolas, the default Alacritty font on Windows, seems to
# include most or all of the characters used by Starship.
# Related: install Scoop and/or WinGet?

# Install fzf
if [[ ! -d ~/.fzf ]]; then
    echo Installing fzf
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    # TODO currently, this fails on Windows with MinGW (no prebuilt binary found)
    ~/.fzf/install
fi

# TODO: consider installing `zk` (which requires `sqlite3` as well): https://github.com/sirupsen/zk

# Create installers directory
mkdir -p ~/Installers

# Install rust
if ! hash rustc 2>/dev/null; then
    if hash sh 2>/dev/null; then
        if hash wget 2>/dev/null; then
            echo Installing Rust
            wget -P ~/Installers https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
            chmod a+x ~/Installers/rustup-init
            ~/Installers/rustup-init
        elif hash curl 2>/dev/null; then
            echo Installing Rust
            curl https://sh.rustup.rs -sSf | sh
        else
            echo "Neither 'curl' nor 'wget' is installed; not installing Rust" >&2
        fi
    else
        echo "*NIX shell not available; not installing Rust" >&2
        # TODO: on Windows, download and run the `rustup` executable
    fi
else
    echo Checking for Rust updates
    rustup update
fi

# XXX TEMP
echo "finished Rust updates"

# Just in case the above didn't work
if ! hash cargo 2>/dev/null; then
    echo "Can't install rust tools; cargo not installed!" >&2
else
    rustup default stable
    if ! hash rg 2>/dev/null; then
        echo Installing ripgrep
        cargo install ripgrep
    fi
    if ! hash fd 2>/dev/null; then
        echo Installing fd
        cargo install fd-find
    fi
    if ! hash tokei 2>/dev/null; then
        echo Installing tokei
        cargo install tokei
    fi
    if ! hash bat 2>/dev/null; then
        echo Installing bat
        cargo install bat
    fi
    # TODO install `broot`? Needs a script, `br`, to be sourced. Just symlink
    # as `.bash.d/br`?
    # TODO install a powerline-compatible font and starship?
    # (Starship is just `cargo install`, but it needs libssl-dev and
    # pkg-config, as well as a Powerline compatible font such as FiraCode.)
    # Other tools:
    # * https://github.com/lotabout/skim (replace fzf, or do they work together?)
    # * https://github.com/mookid/diffr

    # TODO restore default toolchain?

fi

cd ~/bin

if $WSL; then
    if ! hash wsl-open 2>/dev/null; then
        echo "installing wsl-open"
        # Install wsl-open
        curl -o ~/bin/wsl-open https://raw.githubusercontent.com/4U6U57/wsl-open/master/wsl-open.sh
        chmod a+x ~/bin/wsl-open
    fi
fi

# The original sshrc repo apparently no longer exists. I have found forks, but
# they are pretty old.
# I should reconsider whether I actually want this functionality, and/or if
# there's a better way to accomplish something similar.

# TODO: install how2? (Not sure how useful it is yet; requires nodejs and some
# fiddling to make it work; specifically, how2 assumes nodejs executable is
# called `node`)

# TODO: other possibly useful command-line tools:
# * eg (easygit) - Simply wget and chmod
# * Stuff from here: http://zeroturnaround.com/rebellabs/5-unexpectedly-useful-command-line-tools-you-might-overlook/
#   * z - remembers common dirs (work with `cd` alias?)
#   * shellcheck - static analysis of Bash for common errors
#   * multitail - better than `tail -F`?
#   * tree - nice recursive dir printing (already installed at work)

# TODO: automatically install windows tools?

# Currently, We only need the 'bootstrap' file to find the stderred directory.
# Be a bit more permissive when running bash setup scripts; they use unset
# variables.
set +u
set +e
# . ~/.bash.d/source_first.0.bootstrap
set -u
set -e

# Install stderred
skipstderred=false
if ${WINDOWS}; then
    echo "WINDOWS var is ${WINDOWS}"
    echo "On WINDOWS; not installing stderred."
    skipstderred=true
fi
if ! $havetoolchain; then
    echo "No toolchain installed; not installing stderred."
    skipstderred=true
fi
if ! $havecmake; then
    echo "No cmake installed; not installing stderred."
    skipstderred=true
fi

if ! $skipstderred; then
    if [[ ! -d "${stderred_path}" ]]; then
        echo Installing stderred
        cd $(dirname "${stderred_path}")
        git clone https://github.com/sickill/stderred.git
        cd stderred
        make
    fi
fi
